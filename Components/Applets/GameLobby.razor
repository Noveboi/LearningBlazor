@* @page "/applets/{game}/lobby" *@

@using LearningBlazor.Utilities.Base
@rendermode InteractiveServer

<div class="d-flex flex-column mt-1 mb-1 w-75">
@if (Games is null)
{
		<h1 class="display-4 text-light">Loading game data, please wait...</h1>
	}
	else
	{
		foreach (var game in Games) {
			var currentGame = game;
			bool fullGame = game.Players.Count == game.PlayerCapacity;

			<div class="container text-light border border-primary rounded mt-2 mb-2 border-2" 
				id="@(fullGame ? "game-row-unavailable" : "game-row-available")" 
				@onclick="() => GameClicked(currentGame)">
			<div class="row align-items-center user-select-none">
				@* Game ID/Name Columm *@
				<div class="col-3 fs-5 d-flex border-end border-primary border-2 align-self-stretch align-items-center justify-content-center bg-info">
					@game.NameId
				</div>
				<div class="col @(fullGame ? "bg-secondary" : "bg-primary")">
					<div class="d-flex flex-column justify-content-center">
						<p class="text-center fs-4">
							@game.Players.Count / @game.PlayerCapacity Players
						</p>
						<div class="d-flex flex-row fs-6 align-self-center text-center">
							@for (int i = 0; i < game.Players.Count; i++)
							{
								if (i < game.Players.Count - 1)
									@(game.Players[i].Name + ", ")
								else
									@(game.Players[i].Name)
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}
</div>

@code {
	[Parameter]
	public List<GameModel>? Games { get; set; }
	[Parameter]
	public EventCallback<GameModel> GameJoinClick { get; set; }

	private async Task GameClicked(GameModel? game)
	{
		if (game is not null && game.Players.Count != game.PlayerCapacity)
			await GameJoinClick.InvokeAsync(game);
	}
}
