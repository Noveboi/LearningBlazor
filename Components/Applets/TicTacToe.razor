@page "/applets/tictactoe"
@rendermode InteractiveServer
@attribute [Applet(
	"Tic-Tac-Toe",
	"Simple Tic-Tac-Toe game!",
	"/applets/tictactoe"
)]
@using LearningBlazor.Hubs
@using LearningBlazor.Utilities.TicTacToe
@using LearningBlazor.Utilities.Base
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@inherits GameComponent<TicTacToePlayer>

<PageTitle>Tic-Tac-Toe</PageTitle>
<div class="d-flex align-items-center flex-column justify-content-center">
@if (board is not null && !requestedPlayAgain && gameState == GameState.Playing)
{
	<div class="container w-25 h-25 align-self-center">
		@for (int i = 0; i < 3; i++)
		{
			<div class="row flex-nowrap">
				@for (int j = 0; j < 3; j++)
				{
					var row = i;
					var col = j;
					<div class="col p-0">
						<button class="fw-light text-center border border-light m-0 w-100 h-100 text-light"
								style="min-width: 80px; min-height: 80px; font-size:32px; @(isPlayerTurn ? "background-color: #cc12ff;" : "background-color: #aaaaaa;")"
								disabled="@(isPlayerTurn == false)"
								@onclick="() => HandleCellClickAndSend(row, col)">
							@board[row, col]
						</button>
					</div>
				}
			</div>
		}
	</div>
	<div class="container p-2 flex align-self-center"> 
		<div class="row">
			<div class="col">
				<p class="fw-bold display-6"
					style="@(isPlayerTurn ? "color: #cf2244" : "color: #eeeeee")">
						@selfPlayer!.Name
				</p>
			</div>
			<div class="col">
				<p class="fw-bold display-6"
					style="@(isPlayerTurn == false ? "color: #cf2244" : "color: #eeeeee")">
						@opponentName
					</p>
			</div>
		</div>
	</div>
}
else if (board is null)
{
	<h1 class="text-primary">Initializing game, please wait...</h1>
}
else if (requestedPlayAgain)
{
	<h1 class="text-primary">Waiting for other player to confirm...</h1>
}
else if (gameState == GameState.InLobby)
{
	<GameLobby Games="lobbyGames" GameJoinClick="OnGameJoinClick"/>
	<button class="btn bg-primary text-light" @onclick="CreateNewGame">Create a new game</button>
}
else if (gameState == GameState.Waiting)
{
	<h2 class="text-light">Waiting for another player to join...</h2>		
}
else
{
	if (gameState == GameState.Win)
	{
		<p class="text-light display-4">You Win!</p>
	}
		if (gameState == GameState.Loss)
	{
		<p class="text-light display-4">You Lose!</p>
	}
		if (gameState == GameState.Tie)
	{
		<p class="text-light display-4">It's a tie!</p>
	}
		<button class="btn bd-orange-500" @onclick="SendPlayAgainRequest"> Play Again </button>
		<button class="btn bd-orange-500" @onclick="HandleExit"> Exit Game </button>
}
</div>

@code {
	bool requestedPlayAgain = false;
	TicTacToeBoard board = new TicTacToeBoard();
	bool isPlayerTurn = false;

	string opponentName = string.Empty;

	public const string RECEIVERS_MARK = nameof(ReceiveMarkData);

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			await BuildHubConnection("/tictactoehub");
			AddReceiver(nameof(ReceiveResetGame), ReceiveResetGame);
			AddReceiver<string>(nameof(ReceiveSymbol), ReceiveSymbol);
			AddReceiver<int, int>(RECEIVERS_MARK, ReceiveMarkData);
			AddReceiver<string>(nameof(ReceiveOpponentId), ReceiveOpponentId);

			board.Win += (s, e) => gameState = GameState.Win;
			board.Lose += (s, e) => gameState = GameState.Loss;
			board.Tie += (s, e) => gameState = GameState.Tie;
		}
	}

	protected override async Task OtherDisconnected(string playerName)
	{
		await base.OtherDisconnected(playerName);

		gameState = GameState.Waiting;
		isPlayerTurn = false;
		board.Reset();
		requestedPlayAgain = false;
		await InvokeAsync(StateHasChanged);
	}

	protected async Task ReceiveOpponentId(string id)
	{
		await SendToHub(arg1: id);
	}

	public override async Task OtherConnected(string json)
	{
		await base.OtherConnected(json);
		isPlayerTurn = true;
		opponentName = gamePlayers[1].Name;

		await InvokeAsync(StateHasChanged);
	}

	protected override async Task SelfConnected(string json)
	{
		await base.SelfConnected(json);
		opponentName = gamePlayers[0].Name;
	}

	private async Task SendPlayAgainRequest()
	{
		await SendToHub();

		// ADD GAME STATE HERE! REMOVE REQUESTPLAYAGAIN VARIABLE!
		requestedPlayAgain = true;
		await InvokeAsync(StateHasChanged);
	}

	private async Task HandleCellClickAndSend(int i, int j)
	{
		isPlayerTurn = false;
		board.Mark(i, j);

		await SendToHub(i, j, TicTacToeHub.SENDER_MARK);
	}

	private async Task ReceiveResetGame()
	{
		requestedPlayAgain = false;

		gameState = GameState.Playing;
		board.Reset();
		if (board.Symbol == "O")
			isPlayerTurn = true;
		else
			isPlayerTurn = false;
		await InvokeAsync(StateHasChanged);
	} 

	private Task ReceiveSymbol(string s) 
	{
		Logger.LogInformation("Player {Player} received symbol \"{Symbol}\"", selfPlayer!.Name, s);
		board.Symbol = s;
		return Task.CompletedTask;
	}

	private async Task ReceiveMarkData(int i, int j)
	{
		board.OpponentMark(i, j);
		isPlayerTurn = true;
		await InvokeAsync(StateHasChanged);
	}
}
