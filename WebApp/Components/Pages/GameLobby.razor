@page "/applets/{gameTypeString}/lobby" 
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using WebApp.Hubs

@inject NavigationManager NavManager
@inject IServiceProvider ServiceProvider

<div class="d-flex flex-column mt-1 mb-1 align-items-center">
	@if (games is null)
	{
		<h1 class="display-4 text-light">Loading game data, please wait...</h1>
	}
	else
	{
		foreach (var game in games!) 
		{
			<GameDisplay Game="game" OnGameClicked="GameClicked"/>
		}

		<button class="btn btn-primary" @onclick="CreateGame">Create a new game</button>
	}
</div>

@code {
	[Parameter]
	public string GameTypeString { get; set; } = string.Empty;

	List<GameModel<PlayerModel>>? games;
	GameHubProtocol Protocol => GameHubProtocol.Singleton;

	HubConnection? hubConnection;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			hubConnection = ServiceProvider.GetKeyedService<HubConnection>($"{GameTypeString}hub")
				?? throw new Exception("Couldn't find service!");


			hubConnection.On<string>(Protocol[Receivers.GetGameList], async (gamesJson) =>
			{
				games = JsonConvert.DeserializeObject<List<GameModel<PlayerModel>>>(gamesJson);
				await InvokeAsync(StateHasChanged);
			});
			hubConnection.On<string>(Protocol[Receivers.UpdateGameList], async (gameJson) =>
			{
				var game = JsonConvert.DeserializeObject<GameModel<PlayerModel>>(gameJson)
					?? throw new Exception("Deserialized into NULL game model!");
				games?.Add(game);
				await InvokeAsync(StateHasChanged);
			});


			if (hubConnection.State != HubConnectionState.Connected)
				await hubConnection.StartAsync();

			var sessionStorage = ServiceProvider.GetRequiredService<ProtectedSessionStorage>();
			var result = await sessionStorage.GetAsync<string>("username");
			string username = result.Success ? result.Value
				?? throw new Exception("Got NULL value from session storage")
				: "SESSION_FAILURE";

			await hubConnection.SendAsync(Protocol[Senders.CreatePlayer], username);
		}
	}

	async void GameClicked(GameModel<PlayerModel> game)
	{
		if (hubConnection is not null)
			await hubConnection.SendAsync(Protocol[Senders.ClientJoinGame], game.NameId);

		NavManager.NavigateTo($"applets/{GameTypeString}");
	}

	async Task CreateGame()
	{
		if (hubConnection is not null)
			await hubConnection.SendAsync(Protocol[Senders.CreateNewGame]);	

		NavManager.NavigateTo($"applets/{GameTypeString}");
	}
}
