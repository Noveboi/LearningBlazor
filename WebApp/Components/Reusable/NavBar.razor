@inject NavigationManager NavManager
@inject UserService User
@implements IDisposable
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg z-2 p-3 mb-3 bg-dark">
    <a class="navbar-brand" href="#">Novè</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav">
            <NavLink class="@cursorClass" @onclick="@(() => NavigateTo("/"))">Home</NavLink>
            <NavLink class="@cursorClass" @onclick="@(() => NavigateTo("/applets"))">Applets</NavLink>
            <NavLink class="@cursorClass" @onclick="@(() => NavigateTo("/blog"))">Blog</NavLink>
        </div>
    </div>
</nav>
@code {
    string cursorClass = "nav-item nav-link not-clickable";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            User.UsernameSet += OnUsernameSet;
            NavManager.RegisterLocationChangingHandler(locChanged =>
            {
                if (User.UsernameExists == false)
                {
                    locChanged.PreventNavigation();
                }

                return ValueTask.CompletedTask;
            });
        }
    }

    async void OnUsernameSet(object? sender, EventArgs e)
    {
        cursorClass = "nav-item nav-link clickable";
        await InvokeAsync(StateHasChanged);
    }

    void NavigateTo(string href)
    {
        NavManager.NavigateTo(href);
    }

    public void Dispose()
    {
        User.UsernameSet -= OnUsernameSet;
    }
}
