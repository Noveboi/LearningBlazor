<div class="game-display @(fullGame ? "not-clickable" : "clickable")" @onclick="() => OnGameClicked.InvokeAsync(Game)">
		@* Game ID/Name Columm *@
	<div class="game-display-nameid">
		@Game.NameId
	</div>
	<div class="game-display-info @(fullGame ? "bg-disabled" : string.Empty)">
		<div class="d-flex flex-column justify-content-center">
			<p class="text-center fs-4 fw-bold">
				@Game.Players.Count / @Game.PlayerCapacity Players
			</p>
			<div class="d-flex flex-row fs-6 align-self-center fw-lighter">
				@for (int i = 0; i < Game.Players.Count; i++)
				{
					if (i < Game.Players.Count - 1)
						@(Game.Players[i].Name + ", ")
					else
						@(Game.Players[i].Name)
				}
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public GameBase<PlayerModel> Game { get; set; } = default!;

	[Parameter]
	public EventCallback<GameBase<PlayerModel>> OnGameClicked { get; set; }

	bool fullGame = false;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		fullGame = Game.Players.Count >= Game.PlayerCapacity;
	}
}
